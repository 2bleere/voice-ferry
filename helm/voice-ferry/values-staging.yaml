# Staging values for Voice Ferry Helm Chart
# This file contains staging environment configuration that mirrors production
# but with reduced resources and relaxed security for testing

# Global configuration
global:
  environment: "staging"
  debug: true

# Application configuration
app:
  name: "voice-ferry"
  version: "latest"
  
  # Staging image configuration
  image:
    repository: "voice-ferry/voice-ferry"
    tag: "staging"
    pullPolicy: "Always"
  
  # Staging replica count
  replicas: 2
  
  # Staging resource limits (reduced from production)
  resources:
    requests:
      cpu: "200m"
      memory: "256Mi"
    limits:
      cpu: "1000m"
      memory: "1Gi"
  
  # Staging environment variables
  env:
    LOG_LEVEL: "DEBUG"
    ENVIRONMENT: "staging"
    METRICS_ENABLED: "true"
    HEALTH_CHECK_ENABLED: "true"
    DEBUG: "true"
  
  # Staging service configuration
  service:
    type: "ClusterIP"
    ports:
      sip:
        port: 5060
        protocol: "UDP"
      api:
        port: 8080
        protocol: "TCP"
      metrics:
        port: 9090
        protocol: "TCP"
  
  # Staging security context (less restrictive)
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: false
    capabilities:
      drop:
        - ALL
      add:
        - NET_BIND_SERVICE

# Staging ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
  hosts:
    - host: "voice-ferry-staging.example.com"
      paths:
        - path: "/"
          pathType: "Prefix"
          port: 8080
  tls:
    - secretName: "voice-ferry-staging-tls"
      hosts:
        - "voice-ferry-staging.example.com"

# Staging autoscaling configuration (conservative)
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 85

# Staging monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    namespace: "monitoring"
    interval: "60s"
    labels:
      app: "voice-ferry"
      environment: "staging"

# Staging network policies (more permissive)
networkPolicy:
  enabled: false  # Disabled for easier debugging

# Staging Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Staging persistent storage
persistence:
  enabled: true
  storageClass: "standard"
  size: "5Gi"
  accessMode: "ReadWriteOnce"

# Staging Redis configuration
redis:
  enabled: true
  cluster:
    enabled: true
    nodes: 3  # Smaller cluster for staging
    replicas: 0  # No replicas in staging
  auth:
    enabled: false  # Disabled for easier testing
  persistence:
    enabled: true
    storageClass: "standard"
    size: "5Gi"
  resources:
    requests:
      cpu: "100m"
      memory: "128Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"

# Staging etcd configuration
etcd:
  enabled: true
  replicas: 1  # Single node for staging
  auth:
    enabled: false
  persistence:
    enabled: true
    storageClass: "standard"
    size: "5Gi"
  resources:
    requests:
      cpu: "100m"
      memory: "128Mi"
    limits:
      cpu: "250m"
      memory: "256Mi"

# Staging RTPEngine configuration
rtpengine:
  enabled: true
  replicas: 1
  image:
    repository: "rtpengine/rtpengine"
    tag: "latest"
  resources:
    requests:
      cpu: "200m"
      memory: "256Mi"
    limits:
      cpu: "1000m"
      memory: "1Gi"
  service:
    type: "ClusterIP"  # Internal only for staging

# Staging configuration
config:
  sip:
    listen_address: "0.0.0.0:5060"
    max_forwards: 10
    session_expires: 1800
    min_session_expires: 90
  
  api:
    listen_address: "0.0.0.0:8080"
    read_timeout: "30s"
    write_timeout: "30s"
    idle_timeout: "120s"
  
  redis:
    endpoints:
      - "voice-ferry-redis-cluster:6379"
    password: ""  # No password in staging
    db: 0
    pool_size: 10
    min_idle_conns: 2
    max_retries: 3
    retry_delay: "100ms"
  
  etcd:
    endpoints:
      - "voice-ferry-etcd:2379"
    dial_timeout: "5s"
    request_timeout: "10s"
  
  rtpengine:
    endpoints:
      - "voice-ferry-rtpengine:22222"
    timeout: "5s"
  
  logging:
    level: "debug"
    format: "json"
    output: "stdout"
  
  metrics:
    enabled: true
    listen_address: "0.0.0.0:9090"
    path: "/metrics"
  
  health:
    enabled: true
    listen_address: "0.0.0.0:8081"
    path: "/health"
    readiness_path: "/ready"
    liveness_path: "/live"

# Staging TLS configuration (self-signed or staging certs)
tls:
  enabled: false  # Disabled for easier testing

# Staging service account
serviceAccount:
  create: true
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT:role/voice-ferry-staging-role"
  name: "voice-ferry-staging"

# Staging node affinity (less restrictive)
nodeAffinity:
  preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 50
      preference:
        matchExpressions:
          - key: "node-type"
            operator: "In"
            values:
              - "staging"
              - "development"

# Staging pod anti-affinity (relaxed)
podAntiAffinity:
  preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 50
      podAffinityTerm:
        labelSelector:
          matchExpressions:
            - key: "app.kubernetes.io/name"
              operator: "In"
              values:
                - "voice-ferry"
        topologyKey: "kubernetes.io/hostname"

# Staging tolerations
tolerations:
  - key: "node-type"
    operator: "Equal"
    value: "staging"
    effect: "NoSchedule"
  - key: "node-type"
    operator: "Equal"
    value: "development"
    effect: "NoSchedule"
