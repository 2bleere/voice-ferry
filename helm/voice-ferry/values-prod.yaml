# Production values for Voice Ferry Helm Chart
# This file contains production-ready configuration with security hardening,
# resource limits, and high availability settings

# Voice Ferry B2BUA Production Configuration
voiceFerry:
  replicaCount: 5
  
  image:
    registry: ghcr.io
    repository: 2bleere/voice-ferry
    tag: "v1.2.0"
    pullPolicy: IfNotPresent
  
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2

  resources:
    requests:
      memory: "1Gi"
      cpu: "500m"
    limits:
      memory: "4Gi"
      cpu: "2000m"

  autoscaling:
    enabled: true
    minReplicas: 5
    maxReplicas: 20
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80

  podDisruptionBudget:
    enabled: true
    minAvailable: 3

  # Production security hardening
  securityContext:
    runAsNonRoot: true
    runAsUser: 1001
    runAsGroup: 1001
    fsGroup: 1001
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false

  # Production logging
  logging:
    level: "info"
    format: "json"
    structured: true

  # Production SIP configuration
  sip:
    host: "0.0.0.0"
    port: 5060
    transport: "UDP,TCP,TLS"
    tls:
      enabled: true
      port: 5061
      minVersion: "1.2"
    
    timeouts:
      transaction: "32s"
      dialog: "3600s"
      registration: "7200s"
      invite: "180s"

# External Dependencies - Production Grade
redis:
  enabled: true
  architecture: replication
  auth:
    enabled: true
    password: "REPLACE-WITH-SECURE-PASSWORD"
    sentinel: true
  master:
    persistence:
      enabled: true
      storageClass: "fast-ssd"
      size: 50Gi
    resources:
      requests:
        memory: 1Gi
        cpu: 500m
      limits:
        memory: 2Gi
        cpu: 1000m
  replica:
    replicaCount: 3
    persistence:
      enabled: true
      storageClass: "fast-ssd"
      size: 50Gi
    resources:
      requests:
        memory: 1Gi
        cpu: 500m
      limits:
        memory: 2Gi
        cpu: 1000m
  sentinel:
    enabled: true
    masterSet: "voice-ferry-master"
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s

etcd:
  enabled: true
  auth:
    rbac:
      create: true
      allowNoneAuthentication: false
    token:
      type: jwt
  persistence:
    enabled: true
    storageClass: "fast-ssd"
    size: 100Gi
  replicaCount: 5
  resources:
    requests:
      memory: 1Gi
      cpu: 500m
    limits:
      memory: 2Gi
      cpu: 1000m
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s
  startupProbe:
    enabled: true
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30

# Production Monitoring Stack
monitoring:
  prometheus:
    enabled: true
    server:
      persistentVolume:
        enabled: true
        storageClass: "fast-ssd"
        size: 200Gi
      retention: "90d"
      resources:
        requests:
          memory: 4Gi
          cpu: 1000m
        limits:
          memory: 8Gi
          cpu: 2000m
      nodeSelector:
        monitoring: "true"
      tolerations:
        - key: "monitoring"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"
    alertmanager:
      enabled: true
      persistentVolume:
        enabled: true
        storageClass: "fast-ssd"
        size: 20Gi
      resources:
        requests:
          memory: 256Mi
          cpu: 100m
        limits:
          memory: 512Mi
          cpu: 500m
    nodeExporter:
      enabled: true
    kubeStateMetrics:
      enabled: true

  grafana:
    enabled: true
    persistence:
      enabled: true
      storageClass: "fast-ssd" 
      size: 50Gi
    adminPassword: "REPLACE-WITH-SECURE-PASSWORD"
    resources:
      requests:
        memory: 512Mi
        cpu: 250m
      limits:
        memory: 1Gi
        cpu: 500m
    nodeSelector:
      monitoring: "true"

# Production Ingress Configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
  hosts:
    - host: voice-ferry.production.com
      paths:
        - path: /
          pathType: Prefix
        - path: /api
          pathType: Prefix
        - path: /metrics
          pathType: Prefix
  tls:
    - secretName: voice-ferry-tls
      hosts:
        - voice-ferry.production.com

# Production TLS Configuration
tls:
  enabled: true
  certManager:
    enabled: true
    issuer: "letsencrypt-prod"
  certificates:
    - secretName: voice-ferry-api-tls
      dnsNames:
        - voice-ferry.production.com
        - api.voice-ferry.production.com
    - secretName: voice-ferry-sip-tls
      dnsNames:
        - sip.voice-ferry.production.com

# Production Network Policies
networkPolicy:
  enabled: true
  ingress:
    enabled: true
    allowExternal: false
    allowNamespaces:
      - kube-system
      - monitoring
  egress:
    enabled: true
    allowExternal: true
    allowDNS: true

# Production Service Configuration
service:
  type: LoadBalancer
  loadBalancerIP: ""
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"

# Production Backup Configuration
backup:
  enabled: true
  schedule: "0 2 * * *"
  retention: "90"
  s3:
    bucket: "voice-ferry-backups-prod"
    region: "us-west-2"
    storageClass: "STANDARD_IA"

# Production features
development:
  enabled: false
  debug: false
  hotReload: false

# Production node affinity and tolerations
nodeSelector:
  workload: "voice-ferry"

tolerations:
  - key: "voice-ferry"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"

affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
    - labelSelector:
        matchExpressions:
        - key: app.kubernetes.io/name
          operator: In
          values:
          - voice-ferry
      topologyKey: kubernetes.io/hostname

# Production security context
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop:
      - ALL
    add:
      - NET_BIND_SERVICE

# Production ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: "voice-ferry.example.com"
      paths:
        - path: "/"
          pathType: "Prefix"
          port: 8080
  tls:
    - secretName: "voice-ferry-tls"
      hosts:
        - "voice-ferry.example.com"

# Production autoscaling configuration
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Production monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    namespace: "monitoring"
    interval: "30s"
    labels:
      app: "voice-ferry"
      environment: "production"

# Production network policies
networkPolicy:
  enabled: true
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: "ingress-nginx"
      ports:
        - protocol: TCP
          port: 8080
    - from:
        - namespaceSelector:
            matchLabels:
              name: "monitoring"
      ports:
        - protocol: TCP
          port: 9090
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: "voice-ferry"
      ports:
        - protocol: UDP
          port: 5060

# Production Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Production persistent storage
persistence:
  enabled: true
  storageClass: "fast-ssd"
  size: "10Gi"
  accessMode: "ReadWriteOnce"

# Production Redis configuration
redis:
  enabled: true
  cluster:
    enabled: true
    nodes: 6
    replicas: 1
  auth:
    enabled: true
    password: "redis-production-password"
  persistence:
    enabled: true
    storageClass: "fast-ssd"
    size: "20Gi"
  resources:
    requests:
      cpu: "200m"
      memory: "256Mi"
    limits:
      cpu: "1000m"
      memory: "1Gi"

# Production etcd configuration
etcd:
  enabled: true
  replicas: 3
  auth:
    enabled: true
  persistence:
    enabled: true
    storageClass: "fast-ssd"
    size: "10Gi"
  resources:
    requests:
      cpu: "200m"
      memory: "256Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"

# Production RTPEngine configuration
rtpengine:
  enabled: true
  replicas: 2
  image:
    repository: "rtpengine/rtpengine"
    tag: "latest"
  resources:
    requests:
      cpu: "500m"
      memory: "512Mi"
    limits:
      cpu: "2000m"
      memory: "2Gi"
  service:
    type: "LoadBalancer"
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
      service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "udp"

# Production configuration
config:
  sip:
    listen_address: "0.0.0.0:5060"
    max_forwards: 10
    session_expires: 1800
    min_session_expires: 90
  
  api:
    listen_address: "0.0.0.0:8080"
    read_timeout: "30s"
    write_timeout: "30s"
    idle_timeout: "120s"
  
  redis:
    endpoints:
      - "voice-ferry-redis-cluster:6379"
    password: "redis-production-password"
    db: 0
    pool_size: 20
    min_idle_conns: 5
    max_retries: 3
    retry_delay: "100ms"
  
  etcd:
    endpoints:
      - "voice-ferry-etcd:2379"
    dial_timeout: "5s"
    request_timeout: "10s"
  
  rtpengine:
    endpoints:
      - "voice-ferry-rtpengine:22222"
    timeout: "5s"
  
  logging:
    level: "info"
    format: "json"
    output: "stdout"
  
  metrics:
    enabled: true
    listen_address: "0.0.0.0:9090"
    path: "/metrics"
  
  health:
    enabled: true
    listen_address: "0.0.0.0:8081"
    path: "/health"
    readiness_path: "/ready"
    liveness_path: "/live"
    tls:
      enabled: true

# Production TLS configuration
tls:
  enabled: true
  secretName: "voice-ferry-tls-certs"
  cert: |
    -----BEGIN CERTIFICATE-----
    # Production TLS certificate goes here
    -----END CERTIFICATE-----
  key: |
    -----BEGIN PRIVATE KEY-----
    # Production TLS private key goes here
    -----END PRIVATE KEY-----

# Production service account
serviceAccount:
  create: true
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT:role/voice-ferry-prod-role"
  name: "voice-ferry-prod"

# Production node affinity
nodeAffinity:
  requiredDuringSchedulingIgnoredDuringExecution:
    nodeSelectorTerms:
      - matchExpressions:
          - key: "node-type"
            operator: "In"
            values:
              - "production"
          - key: "kubernetes.io/arch"
            operator: "In"
            values:
              - "amd64"

# Production pod anti-affinity
podAntiAffinity:
  preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
            - key: "app.kubernetes.io/name"
              operator: "In"
              values:
                - "voice-ferry"
        topologyKey: "kubernetes.io/hostname"

# Production tolerations
tolerations:
  - key: "node-type"
    operator: "Equal"
    value: "production"
    effect: "NoSchedule"
