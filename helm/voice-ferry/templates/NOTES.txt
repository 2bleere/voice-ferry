1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "voice-ferry.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "voice-ferry.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "voice-ferry.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.health.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "{{ include "voice-ferry.selectorLabels" . }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Check the status of the deployment:
   kubectl get pods -n {{ .Release.Namespace }} -l "{{ include "voice-ferry.selectorLabels" . }}"

3. View application logs:
   kubectl logs -n {{ .Release.Namespace }} -l "{{ include "voice-ferry.selectorLabels" . }}" -f

4. Test the health endpoints:
   kubectl run test-pod --image=curlimages/curl --rm -it --restart=Never -- sh
   # Inside the pod:
   curl http://{{ include "voice-ferry.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.health.port }}/healthz/live
   curl http://{{ include "voice-ferry.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.health.port }}/healthz/ready

5. Access gRPC API:
   kubectl port-forward -n {{ .Release.Namespace }} svc/{{ include "voice-ferry.fullname" . }} {{ .Values.service.grpc.port }}:{{ .Values.service.grpc.port }}
   # API will be available at localhost:{{ .Values.service.grpc.port }}

{{- if .Values.voiceFerry.metrics.enabled }}
6. View metrics:
   kubectl port-forward -n {{ .Release.Namespace }} svc/{{ include "voice-ferry.fullname" . }} 8080:{{ .Values.service.health.port }}
   # Metrics available at http://localhost:8080/metrics
{{- end }}

{{- if .Values.rtpengine.enabled }}
7. RTPEngine service:
   kubectl get svc -n {{ .Release.Namespace }} {{ include "voice-ferry.rtpengineService" . }}
{{- end }}

{{- if .Values.redis.enabled }}
8. Redis connection info:
   Redis is available at: {{ include "voice-ferry.redisConnection" . }}
{{- end }}

{{- if .Values.etcd.enabled }}
9. etcd connection info:
   etcd is available at: {{ include "voice-ferry.etcdConnection" . }}
{{- end }}

10. Run Helm tests:
    helm test {{ .Release.Name }} -n {{ .Release.Namespace }}

For more information about Voice Ferry, visit: https://github.com/2bleere/voice-ferry
