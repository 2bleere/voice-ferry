# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from b2bua.v1 import b2bua_pb2 as b2bua_dot_v1_dot_b2bua__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in b2bua/v1/b2bua_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class B2BUACallServiceStub(object):
    """B2BUA Call Service - manages SIP calls
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitiateCall = channel.unary_unary(
                '/b2bua.v1.B2BUACallService/InitiateCall',
                request_serializer=b2bua_dot_v1_dot_b2bua__pb2.InitiateCallRequest.SerializeToString,
                response_deserializer=b2bua_dot_v1_dot_b2bua__pb2.InitiateCallResponse.FromString,
                _registered_method=True)
        self.TerminateCall = channel.unary_unary(
                '/b2bua.v1.B2BUACallService/TerminateCall',
                request_serializer=b2bua_dot_v1_dot_b2bua__pb2.TerminateCallRequest.SerializeToString,
                response_deserializer=b2bua_dot_v1_dot_b2bua__pb2.TerminateCallResponse.FromString,
                _registered_method=True)
        self.GetActiveCalls = channel.unary_stream(
                '/b2bua.v1.B2BUACallService/GetActiveCalls',
                request_serializer=b2bua_dot_v1_dot_b2bua__pb2.GetActiveCallsRequest.SerializeToString,
                response_deserializer=b2bua_dot_v1_dot_b2bua__pb2.ActiveCallInfo.FromString,
                _registered_method=True)
        self.GetCallDetails = channel.unary_unary(
                '/b2bua.v1.B2BUACallService/GetCallDetails',
                request_serializer=b2bua_dot_v1_dot_b2bua__pb2.GetCallDetailsRequest.SerializeToString,
                response_deserializer=b2bua_dot_v1_dot_b2bua__pb2.CallDetailsResponse.FromString,
                _registered_method=True)


class B2BUACallServiceServicer(object):
    """B2BUA Call Service - manages SIP calls
    """

    def InitiateCall(self, request, context):
        """Initiate a new call
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TerminateCall(self, request, context):
        """Terminate an active call
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetActiveCalls(self, request, context):
        """Get active calls
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCallDetails(self, request, context):
        """Get call details
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_B2BUACallServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitiateCall': grpc.unary_unary_rpc_method_handler(
                    servicer.InitiateCall,
                    request_deserializer=b2bua_dot_v1_dot_b2bua__pb2.InitiateCallRequest.FromString,
                    response_serializer=b2bua_dot_v1_dot_b2bua__pb2.InitiateCallResponse.SerializeToString,
            ),
            'TerminateCall': grpc.unary_unary_rpc_method_handler(
                    servicer.TerminateCall,
                    request_deserializer=b2bua_dot_v1_dot_b2bua__pb2.TerminateCallRequest.FromString,
                    response_serializer=b2bua_dot_v1_dot_b2bua__pb2.TerminateCallResponse.SerializeToString,
            ),
            'GetActiveCalls': grpc.unary_stream_rpc_method_handler(
                    servicer.GetActiveCalls,
                    request_deserializer=b2bua_dot_v1_dot_b2bua__pb2.GetActiveCallsRequest.FromString,
                    response_serializer=b2bua_dot_v1_dot_b2bua__pb2.ActiveCallInfo.SerializeToString,
            ),
            'GetCallDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCallDetails,
                    request_deserializer=b2bua_dot_v1_dot_b2bua__pb2.GetCallDetailsRequest.FromString,
                    response_serializer=b2bua_dot_v1_dot_b2bua__pb2.CallDetailsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'b2bua.v1.B2BUACallService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('b2bua.v1.B2BUACallService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class B2BUACallService(object):
    """B2BUA Call Service - manages SIP calls
    """

    @staticmethod
    def InitiateCall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/b2bua.v1.B2BUACallService/InitiateCall',
            b2bua_dot_v1_dot_b2bua__pb2.InitiateCallRequest.SerializeToString,
            b2bua_dot_v1_dot_b2bua__pb2.InitiateCallResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TerminateCall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/b2bua.v1.B2BUACallService/TerminateCall',
            b2bua_dot_v1_dot_b2bua__pb2.TerminateCallRequest.SerializeToString,
            b2bua_dot_v1_dot_b2bua__pb2.TerminateCallResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetActiveCalls(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/b2bua.v1.B2BUACallService/GetActiveCalls',
            b2bua_dot_v1_dot_b2bua__pb2.GetActiveCallsRequest.SerializeToString,
            b2bua_dot_v1_dot_b2bua__pb2.ActiveCallInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCallDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/b2bua.v1.B2BUACallService/GetCallDetails',
            b2bua_dot_v1_dot_b2bua__pb2.GetCallDetailsRequest.SerializeToString,
            b2bua_dot_v1_dot_b2bua__pb2.CallDetailsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class RoutingRuleServiceStub(object):
    """Routing Rule Service - manages custom routing rules
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddRoutingRule = channel.unary_unary(
                '/b2bua.v1.RoutingRuleService/AddRoutingRule',
                request_serializer=b2bua_dot_v1_dot_b2bua__pb2.AddRoutingRuleRequest.SerializeToString,
                response_deserializer=b2bua_dot_v1_dot_b2bua__pb2.RoutingRuleResponse.FromString,
                _registered_method=True)
        self.GetRoutingRule = channel.unary_unary(
                '/b2bua.v1.RoutingRuleService/GetRoutingRule',
                request_serializer=b2bua_dot_v1_dot_b2bua__pb2.GetRoutingRuleRequest.SerializeToString,
                response_deserializer=b2bua_dot_v1_dot_b2bua__pb2.RoutingRuleResponse.FromString,
                _registered_method=True)
        self.UpdateRoutingRule = channel.unary_unary(
                '/b2bua.v1.RoutingRuleService/UpdateRoutingRule',
                request_serializer=b2bua_dot_v1_dot_b2bua__pb2.UpdateRoutingRuleRequest.SerializeToString,
                response_deserializer=b2bua_dot_v1_dot_b2bua__pb2.RoutingRuleResponse.FromString,
                _registered_method=True)
        self.DeleteRoutingRule = channel.unary_unary(
                '/b2bua.v1.RoutingRuleService/DeleteRoutingRule',
                request_serializer=b2bua_dot_v1_dot_b2bua__pb2.DeleteRoutingRuleRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.ListRoutingRules = channel.unary_unary(
                '/b2bua.v1.RoutingRuleService/ListRoutingRules',
                request_serializer=b2bua_dot_v1_dot_b2bua__pb2.ListRoutingRulesRequest.SerializeToString,
                response_deserializer=b2bua_dot_v1_dot_b2bua__pb2.ListRoutingRulesResponse.FromString,
                _registered_method=True)


class RoutingRuleServiceServicer(object):
    """Routing Rule Service - manages custom routing rules
    """

    def AddRoutingRule(self, request, context):
        """Add a new routing rule
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRoutingRule(self, request, context):
        """Get routing rule by ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRoutingRule(self, request, context):
        """Update routing rule
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRoutingRule(self, request, context):
        """Delete routing rule
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRoutingRules(self, request, context):
        """List all routing rules
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RoutingRuleServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddRoutingRule': grpc.unary_unary_rpc_method_handler(
                    servicer.AddRoutingRule,
                    request_deserializer=b2bua_dot_v1_dot_b2bua__pb2.AddRoutingRuleRequest.FromString,
                    response_serializer=b2bua_dot_v1_dot_b2bua__pb2.RoutingRuleResponse.SerializeToString,
            ),
            'GetRoutingRule': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRoutingRule,
                    request_deserializer=b2bua_dot_v1_dot_b2bua__pb2.GetRoutingRuleRequest.FromString,
                    response_serializer=b2bua_dot_v1_dot_b2bua__pb2.RoutingRuleResponse.SerializeToString,
            ),
            'UpdateRoutingRule': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRoutingRule,
                    request_deserializer=b2bua_dot_v1_dot_b2bua__pb2.UpdateRoutingRuleRequest.FromString,
                    response_serializer=b2bua_dot_v1_dot_b2bua__pb2.RoutingRuleResponse.SerializeToString,
            ),
            'DeleteRoutingRule': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRoutingRule,
                    request_deserializer=b2bua_dot_v1_dot_b2bua__pb2.DeleteRoutingRuleRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ListRoutingRules': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRoutingRules,
                    request_deserializer=b2bua_dot_v1_dot_b2bua__pb2.ListRoutingRulesRequest.FromString,
                    response_serializer=b2bua_dot_v1_dot_b2bua__pb2.ListRoutingRulesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'b2bua.v1.RoutingRuleService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('b2bua.v1.RoutingRuleService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RoutingRuleService(object):
    """Routing Rule Service - manages custom routing rules
    """

    @staticmethod
    def AddRoutingRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/b2bua.v1.RoutingRuleService/AddRoutingRule',
            b2bua_dot_v1_dot_b2bua__pb2.AddRoutingRuleRequest.SerializeToString,
            b2bua_dot_v1_dot_b2bua__pb2.RoutingRuleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRoutingRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/b2bua.v1.RoutingRuleService/GetRoutingRule',
            b2bua_dot_v1_dot_b2bua__pb2.GetRoutingRuleRequest.SerializeToString,
            b2bua_dot_v1_dot_b2bua__pb2.RoutingRuleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateRoutingRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/b2bua.v1.RoutingRuleService/UpdateRoutingRule',
            b2bua_dot_v1_dot_b2bua__pb2.UpdateRoutingRuleRequest.SerializeToString,
            b2bua_dot_v1_dot_b2bua__pb2.RoutingRuleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteRoutingRule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/b2bua.v1.RoutingRuleService/DeleteRoutingRule',
            b2bua_dot_v1_dot_b2bua__pb2.DeleteRoutingRuleRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListRoutingRules(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/b2bua.v1.RoutingRuleService/ListRoutingRules',
            b2bua_dot_v1_dot_b2bua__pb2.ListRoutingRulesRequest.SerializeToString,
            b2bua_dot_v1_dot_b2bua__pb2.ListRoutingRulesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class SIPHeaderServiceStub(object):
    """SIP Header Service - manages SIP header manipulation
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddSipHeader = channel.unary_unary(
                '/b2bua.v1.SIPHeaderService/AddSipHeader',
                request_serializer=b2bua_dot_v1_dot_b2bua__pb2.AddSipHeaderRequest.SerializeToString,
                response_deserializer=b2bua_dot_v1_dot_b2bua__pb2.CommandStatusResponse.FromString,
                _registered_method=True)
        self.GetSipHeaders = channel.unary_unary(
                '/b2bua.v1.SIPHeaderService/GetSipHeaders',
                request_serializer=b2bua_dot_v1_dot_b2bua__pb2.GetSipHeadersRequest.SerializeToString,
                response_deserializer=b2bua_dot_v1_dot_b2bua__pb2.GetSipHeadersResponse.FromString,
                _registered_method=True)
        self.RemoveSipHeader = channel.unary_unary(
                '/b2bua.v1.SIPHeaderService/RemoveSipHeader',
                request_serializer=b2bua_dot_v1_dot_b2bua__pb2.RemoveSipHeaderRequest.SerializeToString,
                response_deserializer=b2bua_dot_v1_dot_b2bua__pb2.CommandStatusResponse.FromString,
                _registered_method=True)
        self.ReplaceSipHeader = channel.unary_unary(
                '/b2bua.v1.SIPHeaderService/ReplaceSipHeader',
                request_serializer=b2bua_dot_v1_dot_b2bua__pb2.ReplaceSipHeaderRequest.SerializeToString,
                response_deserializer=b2bua_dot_v1_dot_b2bua__pb2.CommandStatusResponse.FromString,
                _registered_method=True)


class SIPHeaderServiceServicer(object):
    """SIP Header Service - manages SIP header manipulation
    """

    def AddSipHeader(self, request, context):
        """Add SIP header to a call leg
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSipHeaders(self, request, context):
        """Get SIP headers from a call leg
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveSipHeader(self, request, context):
        """Remove SIP header from a call leg
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplaceSipHeader(self, request, context):
        """Replace SIP header in a call leg
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SIPHeaderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddSipHeader': grpc.unary_unary_rpc_method_handler(
                    servicer.AddSipHeader,
                    request_deserializer=b2bua_dot_v1_dot_b2bua__pb2.AddSipHeaderRequest.FromString,
                    response_serializer=b2bua_dot_v1_dot_b2bua__pb2.CommandStatusResponse.SerializeToString,
            ),
            'GetSipHeaders': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSipHeaders,
                    request_deserializer=b2bua_dot_v1_dot_b2bua__pb2.GetSipHeadersRequest.FromString,
                    response_serializer=b2bua_dot_v1_dot_b2bua__pb2.GetSipHeadersResponse.SerializeToString,
            ),
            'RemoveSipHeader': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveSipHeader,
                    request_deserializer=b2bua_dot_v1_dot_b2bua__pb2.RemoveSipHeaderRequest.FromString,
                    response_serializer=b2bua_dot_v1_dot_b2bua__pb2.CommandStatusResponse.SerializeToString,
            ),
            'ReplaceSipHeader': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplaceSipHeader,
                    request_deserializer=b2bua_dot_v1_dot_b2bua__pb2.ReplaceSipHeaderRequest.FromString,
                    response_serializer=b2bua_dot_v1_dot_b2bua__pb2.CommandStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'b2bua.v1.SIPHeaderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('b2bua.v1.SIPHeaderService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SIPHeaderService(object):
    """SIP Header Service - manages SIP header manipulation
    """

    @staticmethod
    def AddSipHeader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/b2bua.v1.SIPHeaderService/AddSipHeader',
            b2bua_dot_v1_dot_b2bua__pb2.AddSipHeaderRequest.SerializeToString,
            b2bua_dot_v1_dot_b2bua__pb2.CommandStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSipHeaders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/b2bua.v1.SIPHeaderService/GetSipHeaders',
            b2bua_dot_v1_dot_b2bua__pb2.GetSipHeadersRequest.SerializeToString,
            b2bua_dot_v1_dot_b2bua__pb2.GetSipHeadersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveSipHeader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/b2bua.v1.SIPHeaderService/RemoveSipHeader',
            b2bua_dot_v1_dot_b2bua__pb2.RemoveSipHeaderRequest.SerializeToString,
            b2bua_dot_v1_dot_b2bua__pb2.CommandStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReplaceSipHeader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/b2bua.v1.SIPHeaderService/ReplaceSipHeader',
            b2bua_dot_v1_dot_b2bua__pb2.ReplaceSipHeaderRequest.SerializeToString,
            b2bua_dot_v1_dot_b2bua__pb2.CommandStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ConfigurationServiceStub(object):
    """Configuration Service - manages B2BUA configuration
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetGlobalConfig = channel.unary_unary(
                '/b2bua.v1.ConfigurationService/GetGlobalConfig',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=b2bua_dot_v1_dot_b2bua__pb2.GlobalConfigResponse.FromString,
                _registered_method=True)
        self.UpdateGlobalConfig = channel.unary_unary(
                '/b2bua.v1.ConfigurationService/UpdateGlobalConfig',
                request_serializer=b2bua_dot_v1_dot_b2bua__pb2.UpdateGlobalConfigRequest.SerializeToString,
                response_deserializer=b2bua_dot_v1_dot_b2bua__pb2.CommandStatusResponse.FromString,
                _registered_method=True)
        self.ReloadConfig = channel.unary_unary(
                '/b2bua.v1.ConfigurationService/ReloadConfig',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=b2bua_dot_v1_dot_b2bua__pb2.CommandStatusResponse.FromString,
                _registered_method=True)


class ConfigurationServiceServicer(object):
    """Configuration Service - manages B2BUA configuration
    """

    def GetGlobalConfig(self, request, context):
        """Get global configuration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateGlobalConfig(self, request, context):
        """Update global configuration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReloadConfig(self, request, context):
        """Reload configuration from etcd
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConfigurationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetGlobalConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGlobalConfig,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=b2bua_dot_v1_dot_b2bua__pb2.GlobalConfigResponse.SerializeToString,
            ),
            'UpdateGlobalConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateGlobalConfig,
                    request_deserializer=b2bua_dot_v1_dot_b2bua__pb2.UpdateGlobalConfigRequest.FromString,
                    response_serializer=b2bua_dot_v1_dot_b2bua__pb2.CommandStatusResponse.SerializeToString,
            ),
            'ReloadConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.ReloadConfig,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=b2bua_dot_v1_dot_b2bua__pb2.CommandStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'b2bua.v1.ConfigurationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('b2bua.v1.ConfigurationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ConfigurationService(object):
    """Configuration Service - manages B2BUA configuration
    """

    @staticmethod
    def GetGlobalConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/b2bua.v1.ConfigurationService/GetGlobalConfig',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            b2bua_dot_v1_dot_b2bua__pb2.GlobalConfigResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateGlobalConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/b2bua.v1.ConfigurationService/UpdateGlobalConfig',
            b2bua_dot_v1_dot_b2bua__pb2.UpdateGlobalConfigRequest.SerializeToString,
            b2bua_dot_v1_dot_b2bua__pb2.CommandStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReloadConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/b2bua.v1.ConfigurationService/ReloadConfig',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            b2bua_dot_v1_dot_b2bua__pb2.CommandStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class StatusServiceStub(object):
    """Status Service - provides system status and metrics
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSystemStatus = channel.unary_unary(
                '/b2bua.v1.StatusService/GetSystemStatus',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=b2bua_dot_v1_dot_b2bua__pb2.SystemStatusResponse.FromString,
                _registered_method=True)
        self.GetMetrics = channel.unary_unary(
                '/b2bua.v1.StatusService/GetMetrics',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=b2bua_dot_v1_dot_b2bua__pb2.MetricsResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/b2bua.v1.StatusService/HealthCheck',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=b2bua_dot_v1_dot_b2bua__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class StatusServiceServicer(object):
    """Status Service - provides system status and metrics
    """

    def GetSystemStatus(self, request, context):
        """Get system status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMetrics(self, request, context):
        """Get system metrics
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StatusServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSystemStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSystemStatus,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=b2bua_dot_v1_dot_b2bua__pb2.SystemStatusResponse.SerializeToString,
            ),
            'GetMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMetrics,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=b2bua_dot_v1_dot_b2bua__pb2.MetricsResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=b2bua_dot_v1_dot_b2bua__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'b2bua.v1.StatusService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('b2bua.v1.StatusService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class StatusService(object):
    """Status Service - provides system status and metrics
    """

    @staticmethod
    def GetSystemStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/b2bua.v1.StatusService/GetSystemStatus',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            b2bua_dot_v1_dot_b2bua__pb2.SystemStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/b2bua.v1.StatusService/GetMetrics',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            b2bua_dot_v1_dot_b2bua__pb2.MetricsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/b2bua.v1.StatusService/HealthCheck',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            b2bua_dot_v1_dot_b2bua__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
