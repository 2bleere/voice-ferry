// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/b2bua/v1/b2bua.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	B2BUACallService_InitiateCall_FullMethodName   = "/b2bua.v1.B2BUACallService/InitiateCall"
	B2BUACallService_TerminateCall_FullMethodName  = "/b2bua.v1.B2BUACallService/TerminateCall"
	B2BUACallService_GetActiveCalls_FullMethodName = "/b2bua.v1.B2BUACallService/GetActiveCalls"
	B2BUACallService_GetCallDetails_FullMethodName = "/b2bua.v1.B2BUACallService/GetCallDetails"
)

// B2BUACallServiceClient is the client API for B2BUACallService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// B2BUA Call Service - manages SIP calls
type B2BUACallServiceClient interface {
	// Initiate a new call
	InitiateCall(ctx context.Context, in *InitiateCallRequest, opts ...grpc.CallOption) (*InitiateCallResponse, error)
	// Terminate an active call
	TerminateCall(ctx context.Context, in *TerminateCallRequest, opts ...grpc.CallOption) (*TerminateCallResponse, error)
	// Get active calls
	GetActiveCalls(ctx context.Context, in *GetActiveCallsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ActiveCallInfo], error)
	// Get call details
	GetCallDetails(ctx context.Context, in *GetCallDetailsRequest, opts ...grpc.CallOption) (*CallDetailsResponse, error)
}

type b2BUACallServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewB2BUACallServiceClient(cc grpc.ClientConnInterface) B2BUACallServiceClient {
	return &b2BUACallServiceClient{cc}
}

func (c *b2BUACallServiceClient) InitiateCall(ctx context.Context, in *InitiateCallRequest, opts ...grpc.CallOption) (*InitiateCallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitiateCallResponse)
	err := c.cc.Invoke(ctx, B2BUACallService_InitiateCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *b2BUACallServiceClient) TerminateCall(ctx context.Context, in *TerminateCallRequest, opts ...grpc.CallOption) (*TerminateCallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TerminateCallResponse)
	err := c.cc.Invoke(ctx, B2BUACallService_TerminateCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *b2BUACallServiceClient) GetActiveCalls(ctx context.Context, in *GetActiveCallsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ActiveCallInfo], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &B2BUACallService_ServiceDesc.Streams[0], B2BUACallService_GetActiveCalls_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetActiveCallsRequest, ActiveCallInfo]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type B2BUACallService_GetActiveCallsClient = grpc.ServerStreamingClient[ActiveCallInfo]

func (c *b2BUACallServiceClient) GetCallDetails(ctx context.Context, in *GetCallDetailsRequest, opts ...grpc.CallOption) (*CallDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CallDetailsResponse)
	err := c.cc.Invoke(ctx, B2BUACallService_GetCallDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// B2BUACallServiceServer is the server API for B2BUACallService service.
// All implementations must embed UnimplementedB2BUACallServiceServer
// for forward compatibility.
//
// B2BUA Call Service - manages SIP calls
type B2BUACallServiceServer interface {
	// Initiate a new call
	InitiateCall(context.Context, *InitiateCallRequest) (*InitiateCallResponse, error)
	// Terminate an active call
	TerminateCall(context.Context, *TerminateCallRequest) (*TerminateCallResponse, error)
	// Get active calls
	GetActiveCalls(*GetActiveCallsRequest, grpc.ServerStreamingServer[ActiveCallInfo]) error
	// Get call details
	GetCallDetails(context.Context, *GetCallDetailsRequest) (*CallDetailsResponse, error)
	mustEmbedUnimplementedB2BUACallServiceServer()
}

// UnimplementedB2BUACallServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedB2BUACallServiceServer struct{}

func (UnimplementedB2BUACallServiceServer) InitiateCall(context.Context, *InitiateCallRequest) (*InitiateCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateCall not implemented")
}
func (UnimplementedB2BUACallServiceServer) TerminateCall(context.Context, *TerminateCallRequest) (*TerminateCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateCall not implemented")
}
func (UnimplementedB2BUACallServiceServer) GetActiveCalls(*GetActiveCallsRequest, grpc.ServerStreamingServer[ActiveCallInfo]) error {
	return status.Errorf(codes.Unimplemented, "method GetActiveCalls not implemented")
}
func (UnimplementedB2BUACallServiceServer) GetCallDetails(context.Context, *GetCallDetailsRequest) (*CallDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCallDetails not implemented")
}
func (UnimplementedB2BUACallServiceServer) mustEmbedUnimplementedB2BUACallServiceServer() {}
func (UnimplementedB2BUACallServiceServer) testEmbeddedByValue()                          {}

// UnsafeB2BUACallServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to B2BUACallServiceServer will
// result in compilation errors.
type UnsafeB2BUACallServiceServer interface {
	mustEmbedUnimplementedB2BUACallServiceServer()
}

func RegisterB2BUACallServiceServer(s grpc.ServiceRegistrar, srv B2BUACallServiceServer) {
	// If the following call pancis, it indicates UnimplementedB2BUACallServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&B2BUACallService_ServiceDesc, srv)
}

func _B2BUACallService_InitiateCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(B2BUACallServiceServer).InitiateCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: B2BUACallService_InitiateCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(B2BUACallServiceServer).InitiateCall(ctx, req.(*InitiateCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _B2BUACallService_TerminateCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(B2BUACallServiceServer).TerminateCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: B2BUACallService_TerminateCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(B2BUACallServiceServer).TerminateCall(ctx, req.(*TerminateCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _B2BUACallService_GetActiveCalls_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetActiveCallsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(B2BUACallServiceServer).GetActiveCalls(m, &grpc.GenericServerStream[GetActiveCallsRequest, ActiveCallInfo]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type B2BUACallService_GetActiveCallsServer = grpc.ServerStreamingServer[ActiveCallInfo]

func _B2BUACallService_GetCallDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCallDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(B2BUACallServiceServer).GetCallDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: B2BUACallService_GetCallDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(B2BUACallServiceServer).GetCallDetails(ctx, req.(*GetCallDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// B2BUACallService_ServiceDesc is the grpc.ServiceDesc for B2BUACallService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var B2BUACallService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "b2bua.v1.B2BUACallService",
	HandlerType: (*B2BUACallServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitiateCall",
			Handler:    _B2BUACallService_InitiateCall_Handler,
		},
		{
			MethodName: "TerminateCall",
			Handler:    _B2BUACallService_TerminateCall_Handler,
		},
		{
			MethodName: "GetCallDetails",
			Handler:    _B2BUACallService_GetCallDetails_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetActiveCalls",
			Handler:       _B2BUACallService_GetActiveCalls_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/b2bua/v1/b2bua.proto",
}

const (
	RoutingRuleService_AddRoutingRule_FullMethodName    = "/b2bua.v1.RoutingRuleService/AddRoutingRule"
	RoutingRuleService_GetRoutingRule_FullMethodName    = "/b2bua.v1.RoutingRuleService/GetRoutingRule"
	RoutingRuleService_UpdateRoutingRule_FullMethodName = "/b2bua.v1.RoutingRuleService/UpdateRoutingRule"
	RoutingRuleService_DeleteRoutingRule_FullMethodName = "/b2bua.v1.RoutingRuleService/DeleteRoutingRule"
	RoutingRuleService_ListRoutingRules_FullMethodName  = "/b2bua.v1.RoutingRuleService/ListRoutingRules"
)

// RoutingRuleServiceClient is the client API for RoutingRuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Routing Rule Service - manages custom routing rules
type RoutingRuleServiceClient interface {
	// Add a new routing rule
	AddRoutingRule(ctx context.Context, in *AddRoutingRuleRequest, opts ...grpc.CallOption) (*RoutingRuleResponse, error)
	// Get routing rule by ID
	GetRoutingRule(ctx context.Context, in *GetRoutingRuleRequest, opts ...grpc.CallOption) (*RoutingRuleResponse, error)
	// Update routing rule
	UpdateRoutingRule(ctx context.Context, in *UpdateRoutingRuleRequest, opts ...grpc.CallOption) (*RoutingRuleResponse, error)
	// Delete routing rule
	DeleteRoutingRule(ctx context.Context, in *DeleteRoutingRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List all routing rules
	ListRoutingRules(ctx context.Context, in *ListRoutingRulesRequest, opts ...grpc.CallOption) (*ListRoutingRulesResponse, error)
}

type routingRuleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutingRuleServiceClient(cc grpc.ClientConnInterface) RoutingRuleServiceClient {
	return &routingRuleServiceClient{cc}
}

func (c *routingRuleServiceClient) AddRoutingRule(ctx context.Context, in *AddRoutingRuleRequest, opts ...grpc.CallOption) (*RoutingRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoutingRuleResponse)
	err := c.cc.Invoke(ctx, RoutingRuleService_AddRoutingRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingRuleServiceClient) GetRoutingRule(ctx context.Context, in *GetRoutingRuleRequest, opts ...grpc.CallOption) (*RoutingRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoutingRuleResponse)
	err := c.cc.Invoke(ctx, RoutingRuleService_GetRoutingRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingRuleServiceClient) UpdateRoutingRule(ctx context.Context, in *UpdateRoutingRuleRequest, opts ...grpc.CallOption) (*RoutingRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoutingRuleResponse)
	err := c.cc.Invoke(ctx, RoutingRuleService_UpdateRoutingRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingRuleServiceClient) DeleteRoutingRule(ctx context.Context, in *DeleteRoutingRuleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RoutingRuleService_DeleteRoutingRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingRuleServiceClient) ListRoutingRules(ctx context.Context, in *ListRoutingRulesRequest, opts ...grpc.CallOption) (*ListRoutingRulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRoutingRulesResponse)
	err := c.cc.Invoke(ctx, RoutingRuleService_ListRoutingRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutingRuleServiceServer is the server API for RoutingRuleService service.
// All implementations must embed UnimplementedRoutingRuleServiceServer
// for forward compatibility.
//
// Routing Rule Service - manages custom routing rules
type RoutingRuleServiceServer interface {
	// Add a new routing rule
	AddRoutingRule(context.Context, *AddRoutingRuleRequest) (*RoutingRuleResponse, error)
	// Get routing rule by ID
	GetRoutingRule(context.Context, *GetRoutingRuleRequest) (*RoutingRuleResponse, error)
	// Update routing rule
	UpdateRoutingRule(context.Context, *UpdateRoutingRuleRequest) (*RoutingRuleResponse, error)
	// Delete routing rule
	DeleteRoutingRule(context.Context, *DeleteRoutingRuleRequest) (*emptypb.Empty, error)
	// List all routing rules
	ListRoutingRules(context.Context, *ListRoutingRulesRequest) (*ListRoutingRulesResponse, error)
	mustEmbedUnimplementedRoutingRuleServiceServer()
}

// UnimplementedRoutingRuleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoutingRuleServiceServer struct{}

func (UnimplementedRoutingRuleServiceServer) AddRoutingRule(context.Context, *AddRoutingRuleRequest) (*RoutingRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoutingRule not implemented")
}
func (UnimplementedRoutingRuleServiceServer) GetRoutingRule(context.Context, *GetRoutingRuleRequest) (*RoutingRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoutingRule not implemented")
}
func (UnimplementedRoutingRuleServiceServer) UpdateRoutingRule(context.Context, *UpdateRoutingRuleRequest) (*RoutingRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoutingRule not implemented")
}
func (UnimplementedRoutingRuleServiceServer) DeleteRoutingRule(context.Context, *DeleteRoutingRuleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoutingRule not implemented")
}
func (UnimplementedRoutingRuleServiceServer) ListRoutingRules(context.Context, *ListRoutingRulesRequest) (*ListRoutingRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoutingRules not implemented")
}
func (UnimplementedRoutingRuleServiceServer) mustEmbedUnimplementedRoutingRuleServiceServer() {}
func (UnimplementedRoutingRuleServiceServer) testEmbeddedByValue()                            {}

// UnsafeRoutingRuleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutingRuleServiceServer will
// result in compilation errors.
type UnsafeRoutingRuleServiceServer interface {
	mustEmbedUnimplementedRoutingRuleServiceServer()
}

func RegisterRoutingRuleServiceServer(s grpc.ServiceRegistrar, srv RoutingRuleServiceServer) {
	// If the following call pancis, it indicates UnimplementedRoutingRuleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RoutingRuleService_ServiceDesc, srv)
}

func _RoutingRuleService_AddRoutingRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoutingRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingRuleServiceServer).AddRoutingRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingRuleService_AddRoutingRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingRuleServiceServer).AddRoutingRule(ctx, req.(*AddRoutingRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingRuleService_GetRoutingRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoutingRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingRuleServiceServer).GetRoutingRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingRuleService_GetRoutingRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingRuleServiceServer).GetRoutingRule(ctx, req.(*GetRoutingRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingRuleService_UpdateRoutingRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoutingRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingRuleServiceServer).UpdateRoutingRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingRuleService_UpdateRoutingRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingRuleServiceServer).UpdateRoutingRule(ctx, req.(*UpdateRoutingRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingRuleService_DeleteRoutingRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoutingRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingRuleServiceServer).DeleteRoutingRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingRuleService_DeleteRoutingRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingRuleServiceServer).DeleteRoutingRule(ctx, req.(*DeleteRoutingRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingRuleService_ListRoutingRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoutingRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingRuleServiceServer).ListRoutingRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingRuleService_ListRoutingRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingRuleServiceServer).ListRoutingRules(ctx, req.(*ListRoutingRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoutingRuleService_ServiceDesc is the grpc.ServiceDesc for RoutingRuleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoutingRuleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "b2bua.v1.RoutingRuleService",
	HandlerType: (*RoutingRuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRoutingRule",
			Handler:    _RoutingRuleService_AddRoutingRule_Handler,
		},
		{
			MethodName: "GetRoutingRule",
			Handler:    _RoutingRuleService_GetRoutingRule_Handler,
		},
		{
			MethodName: "UpdateRoutingRule",
			Handler:    _RoutingRuleService_UpdateRoutingRule_Handler,
		},
		{
			MethodName: "DeleteRoutingRule",
			Handler:    _RoutingRuleService_DeleteRoutingRule_Handler,
		},
		{
			MethodName: "ListRoutingRules",
			Handler:    _RoutingRuleService_ListRoutingRules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/b2bua/v1/b2bua.proto",
}

const (
	SIPHeaderService_AddSipHeader_FullMethodName     = "/b2bua.v1.SIPHeaderService/AddSipHeader"
	SIPHeaderService_GetSipHeaders_FullMethodName    = "/b2bua.v1.SIPHeaderService/GetSipHeaders"
	SIPHeaderService_RemoveSipHeader_FullMethodName  = "/b2bua.v1.SIPHeaderService/RemoveSipHeader"
	SIPHeaderService_ReplaceSipHeader_FullMethodName = "/b2bua.v1.SIPHeaderService/ReplaceSipHeader"
)

// SIPHeaderServiceClient is the client API for SIPHeaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SIP Header Service - manages SIP header manipulation
type SIPHeaderServiceClient interface {
	// Add SIP header to a call leg
	AddSipHeader(ctx context.Context, in *AddSipHeaderRequest, opts ...grpc.CallOption) (*CommandStatusResponse, error)
	// Get SIP headers from a call leg
	GetSipHeaders(ctx context.Context, in *GetSipHeadersRequest, opts ...grpc.CallOption) (*GetSipHeadersResponse, error)
	// Remove SIP header from a call leg
	RemoveSipHeader(ctx context.Context, in *RemoveSipHeaderRequest, opts ...grpc.CallOption) (*CommandStatusResponse, error)
	// Replace SIP header in a call leg
	ReplaceSipHeader(ctx context.Context, in *ReplaceSipHeaderRequest, opts ...grpc.CallOption) (*CommandStatusResponse, error)
}

type sIPHeaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSIPHeaderServiceClient(cc grpc.ClientConnInterface) SIPHeaderServiceClient {
	return &sIPHeaderServiceClient{cc}
}

func (c *sIPHeaderServiceClient) AddSipHeader(ctx context.Context, in *AddSipHeaderRequest, opts ...grpc.CallOption) (*CommandStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandStatusResponse)
	err := c.cc.Invoke(ctx, SIPHeaderService_AddSipHeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sIPHeaderServiceClient) GetSipHeaders(ctx context.Context, in *GetSipHeadersRequest, opts ...grpc.CallOption) (*GetSipHeadersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSipHeadersResponse)
	err := c.cc.Invoke(ctx, SIPHeaderService_GetSipHeaders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sIPHeaderServiceClient) RemoveSipHeader(ctx context.Context, in *RemoveSipHeaderRequest, opts ...grpc.CallOption) (*CommandStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandStatusResponse)
	err := c.cc.Invoke(ctx, SIPHeaderService_RemoveSipHeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sIPHeaderServiceClient) ReplaceSipHeader(ctx context.Context, in *ReplaceSipHeaderRequest, opts ...grpc.CallOption) (*CommandStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandStatusResponse)
	err := c.cc.Invoke(ctx, SIPHeaderService_ReplaceSipHeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SIPHeaderServiceServer is the server API for SIPHeaderService service.
// All implementations must embed UnimplementedSIPHeaderServiceServer
// for forward compatibility.
//
// SIP Header Service - manages SIP header manipulation
type SIPHeaderServiceServer interface {
	// Add SIP header to a call leg
	AddSipHeader(context.Context, *AddSipHeaderRequest) (*CommandStatusResponse, error)
	// Get SIP headers from a call leg
	GetSipHeaders(context.Context, *GetSipHeadersRequest) (*GetSipHeadersResponse, error)
	// Remove SIP header from a call leg
	RemoveSipHeader(context.Context, *RemoveSipHeaderRequest) (*CommandStatusResponse, error)
	// Replace SIP header in a call leg
	ReplaceSipHeader(context.Context, *ReplaceSipHeaderRequest) (*CommandStatusResponse, error)
	mustEmbedUnimplementedSIPHeaderServiceServer()
}

// UnimplementedSIPHeaderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSIPHeaderServiceServer struct{}

func (UnimplementedSIPHeaderServiceServer) AddSipHeader(context.Context, *AddSipHeaderRequest) (*CommandStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSipHeader not implemented")
}
func (UnimplementedSIPHeaderServiceServer) GetSipHeaders(context.Context, *GetSipHeadersRequest) (*GetSipHeadersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSipHeaders not implemented")
}
func (UnimplementedSIPHeaderServiceServer) RemoveSipHeader(context.Context, *RemoveSipHeaderRequest) (*CommandStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSipHeader not implemented")
}
func (UnimplementedSIPHeaderServiceServer) ReplaceSipHeader(context.Context, *ReplaceSipHeaderRequest) (*CommandStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceSipHeader not implemented")
}
func (UnimplementedSIPHeaderServiceServer) mustEmbedUnimplementedSIPHeaderServiceServer() {}
func (UnimplementedSIPHeaderServiceServer) testEmbeddedByValue()                          {}

// UnsafeSIPHeaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SIPHeaderServiceServer will
// result in compilation errors.
type UnsafeSIPHeaderServiceServer interface {
	mustEmbedUnimplementedSIPHeaderServiceServer()
}

func RegisterSIPHeaderServiceServer(s grpc.ServiceRegistrar, srv SIPHeaderServiceServer) {
	// If the following call pancis, it indicates UnimplementedSIPHeaderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SIPHeaderService_ServiceDesc, srv)
}

func _SIPHeaderService_AddSipHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSipHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SIPHeaderServiceServer).AddSipHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SIPHeaderService_AddSipHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SIPHeaderServiceServer).AddSipHeader(ctx, req.(*AddSipHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SIPHeaderService_GetSipHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSipHeadersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SIPHeaderServiceServer).GetSipHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SIPHeaderService_GetSipHeaders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SIPHeaderServiceServer).GetSipHeaders(ctx, req.(*GetSipHeadersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SIPHeaderService_RemoveSipHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSipHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SIPHeaderServiceServer).RemoveSipHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SIPHeaderService_RemoveSipHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SIPHeaderServiceServer).RemoveSipHeader(ctx, req.(*RemoveSipHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SIPHeaderService_ReplaceSipHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceSipHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SIPHeaderServiceServer).ReplaceSipHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SIPHeaderService_ReplaceSipHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SIPHeaderServiceServer).ReplaceSipHeader(ctx, req.(*ReplaceSipHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SIPHeaderService_ServiceDesc is the grpc.ServiceDesc for SIPHeaderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SIPHeaderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "b2bua.v1.SIPHeaderService",
	HandlerType: (*SIPHeaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSipHeader",
			Handler:    _SIPHeaderService_AddSipHeader_Handler,
		},
		{
			MethodName: "GetSipHeaders",
			Handler:    _SIPHeaderService_GetSipHeaders_Handler,
		},
		{
			MethodName: "RemoveSipHeader",
			Handler:    _SIPHeaderService_RemoveSipHeader_Handler,
		},
		{
			MethodName: "ReplaceSipHeader",
			Handler:    _SIPHeaderService_ReplaceSipHeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/b2bua/v1/b2bua.proto",
}

const (
	ConfigurationService_GetGlobalConfig_FullMethodName    = "/b2bua.v1.ConfigurationService/GetGlobalConfig"
	ConfigurationService_UpdateGlobalConfig_FullMethodName = "/b2bua.v1.ConfigurationService/UpdateGlobalConfig"
	ConfigurationService_ReloadConfig_FullMethodName       = "/b2bua.v1.ConfigurationService/ReloadConfig"
)

// ConfigurationServiceClient is the client API for ConfigurationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Configuration Service - manages B2BUA configuration
type ConfigurationServiceClient interface {
	// Get global configuration
	GetGlobalConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GlobalConfigResponse, error)
	// Update global configuration
	UpdateGlobalConfig(ctx context.Context, in *UpdateGlobalConfigRequest, opts ...grpc.CallOption) (*CommandStatusResponse, error)
	// Reload configuration from etcd
	ReloadConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CommandStatusResponse, error)
}

type configurationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigurationServiceClient(cc grpc.ClientConnInterface) ConfigurationServiceClient {
	return &configurationServiceClient{cc}
}

func (c *configurationServiceClient) GetGlobalConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GlobalConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GlobalConfigResponse)
	err := c.cc.Invoke(ctx, ConfigurationService_GetGlobalConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) UpdateGlobalConfig(ctx context.Context, in *UpdateGlobalConfigRequest, opts ...grpc.CallOption) (*CommandStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandStatusResponse)
	err := c.cc.Invoke(ctx, ConfigurationService_UpdateGlobalConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) ReloadConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CommandStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandStatusResponse)
	err := c.cc.Invoke(ctx, ConfigurationService_ReloadConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigurationServiceServer is the server API for ConfigurationService service.
// All implementations must embed UnimplementedConfigurationServiceServer
// for forward compatibility.
//
// Configuration Service - manages B2BUA configuration
type ConfigurationServiceServer interface {
	// Get global configuration
	GetGlobalConfig(context.Context, *emptypb.Empty) (*GlobalConfigResponse, error)
	// Update global configuration
	UpdateGlobalConfig(context.Context, *UpdateGlobalConfigRequest) (*CommandStatusResponse, error)
	// Reload configuration from etcd
	ReloadConfig(context.Context, *emptypb.Empty) (*CommandStatusResponse, error)
	mustEmbedUnimplementedConfigurationServiceServer()
}

// UnimplementedConfigurationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConfigurationServiceServer struct{}

func (UnimplementedConfigurationServiceServer) GetGlobalConfig(context.Context, *emptypb.Empty) (*GlobalConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGlobalConfig not implemented")
}
func (UnimplementedConfigurationServiceServer) UpdateGlobalConfig(context.Context, *UpdateGlobalConfigRequest) (*CommandStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGlobalConfig not implemented")
}
func (UnimplementedConfigurationServiceServer) ReloadConfig(context.Context, *emptypb.Empty) (*CommandStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadConfig not implemented")
}
func (UnimplementedConfigurationServiceServer) mustEmbedUnimplementedConfigurationServiceServer() {}
func (UnimplementedConfigurationServiceServer) testEmbeddedByValue()                              {}

// UnsafeConfigurationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigurationServiceServer will
// result in compilation errors.
type UnsafeConfigurationServiceServer interface {
	mustEmbedUnimplementedConfigurationServiceServer()
}

func RegisterConfigurationServiceServer(s grpc.ServiceRegistrar, srv ConfigurationServiceServer) {
	// If the following call pancis, it indicates UnimplementedConfigurationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConfigurationService_ServiceDesc, srv)
}

func _ConfigurationService_GetGlobalConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetGlobalConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigurationService_GetGlobalConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetGlobalConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_UpdateGlobalConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGlobalConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).UpdateGlobalConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigurationService_UpdateGlobalConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).UpdateGlobalConfig(ctx, req.(*UpdateGlobalConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_ReloadConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).ReloadConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigurationService_ReloadConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).ReloadConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigurationService_ServiceDesc is the grpc.ServiceDesc for ConfigurationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigurationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "b2bua.v1.ConfigurationService",
	HandlerType: (*ConfigurationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGlobalConfig",
			Handler:    _ConfigurationService_GetGlobalConfig_Handler,
		},
		{
			MethodName: "UpdateGlobalConfig",
			Handler:    _ConfigurationService_UpdateGlobalConfig_Handler,
		},
		{
			MethodName: "ReloadConfig",
			Handler:    _ConfigurationService_ReloadConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/b2bua/v1/b2bua.proto",
}

const (
	StatusService_GetSystemStatus_FullMethodName = "/b2bua.v1.StatusService/GetSystemStatus"
	StatusService_GetMetrics_FullMethodName      = "/b2bua.v1.StatusService/GetMetrics"
	StatusService_HealthCheck_FullMethodName     = "/b2bua.v1.StatusService/HealthCheck"
)

// StatusServiceClient is the client API for StatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Status Service - provides system status and metrics
type StatusServiceClient interface {
	// Get system status
	GetSystemStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SystemStatusResponse, error)
	// Get system metrics
	GetMetrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MetricsResponse, error)
	// Health check
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type statusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatusServiceClient(cc grpc.ClientConnInterface) StatusServiceClient {
	return &statusServiceClient{cc}
}

func (c *statusServiceClient) GetSystemStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SystemStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemStatusResponse)
	err := c.cc.Invoke(ctx, StatusService_GetSystemStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusServiceClient) GetMetrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricsResponse)
	err := c.cc.Invoke(ctx, StatusService_GetMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusServiceClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, StatusService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatusServiceServer is the server API for StatusService service.
// All implementations must embed UnimplementedStatusServiceServer
// for forward compatibility.
//
// Status Service - provides system status and metrics
type StatusServiceServer interface {
	// Get system status
	GetSystemStatus(context.Context, *emptypb.Empty) (*SystemStatusResponse, error)
	// Get system metrics
	GetMetrics(context.Context, *emptypb.Empty) (*MetricsResponse, error)
	// Health check
	HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error)
	mustEmbedUnimplementedStatusServiceServer()
}

// UnimplementedStatusServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStatusServiceServer struct{}

func (UnimplementedStatusServiceServer) GetSystemStatus(context.Context, *emptypb.Empty) (*SystemStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemStatus not implemented")
}
func (UnimplementedStatusServiceServer) GetMetrics(context.Context, *emptypb.Empty) (*MetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedStatusServiceServer) HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedStatusServiceServer) mustEmbedUnimplementedStatusServiceServer() {}
func (UnimplementedStatusServiceServer) testEmbeddedByValue()                       {}

// UnsafeStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatusServiceServer will
// result in compilation errors.
type UnsafeStatusServiceServer interface {
	mustEmbedUnimplementedStatusServiceServer()
}

func RegisterStatusServiceServer(s grpc.ServiceRegistrar, srv StatusServiceServer) {
	// If the following call pancis, it indicates UnimplementedStatusServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StatusService_ServiceDesc, srv)
}

func _StatusService_GetSystemStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).GetSystemStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatusService_GetSystemStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).GetSystemStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusService_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatusService_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).GetMetrics(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatusService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// StatusService_ServiceDesc is the grpc.ServiceDesc for StatusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "b2bua.v1.StatusService",
	HandlerType: (*StatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSystemStatus",
			Handler:    _StatusService_GetSystemStatus_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _StatusService_GetMetrics_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _StatusService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/b2bua/v1/b2bua.proto",
}
