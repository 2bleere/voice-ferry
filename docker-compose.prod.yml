version: '3.8'

services:
  # Voice Ferry SIP B2BUA Server
  voice-ferry:
    image: 2bleere/voice-ferry:latest
    container_name: voice-ferry-b2bua
    restart: unless-stopped
    ports:
      - "5060:5060/udp"   # SIP UDP
      - "5060:5060/tcp"   # SIP TCP
      - "5061:5061/tcp"   # SIP TLS
      - "50051:50051"     # gRPC API
      - "8080:8080"       # Health/Metrics
    environment:
      - LOG_LEVEL=info
      - CONFIG_FILE=/etc/voice-ferry/config.yaml
      - REDIS_URL=redis://redis:6379
      - ETCD_ENDPOINTS=http://etcd:2379
      - RTPENGINE_HOST=rtpengine
      - RTPENGINE_PORT=22222
      - JWT_SIGNING_KEY=${JWT_SIGNING_KEY}
      - TLS_CERT_FILE=/etc/ssl/certs/voice-ferry.crt
      - TLS_KEY_FILE=/etc/ssl/private/voice-ferry.key
    volumes:
      - ./configs/production.yaml:/etc/voice-ferry/config.yaml:ro
      - ./ssl:/etc/ssl:ro
      - voice_ferry_logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      etcd:
        condition: service_healthy
      rtpengine:
        condition: service_started
    networks:
      - voice-ferry-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/healthz/live", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: voice-ferry-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - voice-ferry-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

  # etcd for distributed configuration
  etcd:
    image: quay.io/coreos/etcd:v3.5.9
    container_name: voice-ferry-etcd
    restart: unless-stopped
    ports:
      - "2379:2379"
      - "2380:2380"
    environment:
      - ETCD_NAME=etcd0
      - ETCD_DATA_DIR=/etcd-data
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_ADVERTISE_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
      - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://0.0.0.0:2380
      - ETCD_INITIAL_CLUSTER=etcd0=http://0.0.0.0:2380
      - ETCD_INITIAL_CLUSTER_TOKEN=voice-ferry-cluster
      - ETCD_INITIAL_CLUSTER_STATE=new
      - ETCD_LOG_LEVEL=info
      - ETCD_LOGGER=zap
      - ETCD_LOG_OUTPUTS=stderr
    volumes:
      - etcd_data:/etcd-data
    networks:
      - voice-ferry-network
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

  # RTPEngine for media handling
  rtpengine:
    image: drachtio/rtpengine:latest
    container_name: voice-ferry-rtpengine
    restart: unless-stopped
    privileged: true
    ports:
      - "22222:22222/udp"   # Control port
      - "30000-31000:30000-31000/udp"  # RTP ports
    command: |
      rtpengine --interface=internal/172.20.0.0/16
                --interface=external/0.0.0.0
                --listen-ng=22222
                --port-min=30000
                --port-max=31000
                --log-level=6
                --log-facility=local0
                --redis=redis:6379/1
                --redis-expires=86400
                --delete-delay=0
                --timeout=60
                --silent-timeout=3600
                --final-timeout=7200
                --control-tos=184
                --tos=184
                --foreground
                --pidfile=/var/run/rtpengine.pid
    networks:
      - voice-ferry-network
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M

  # Web UI (optional)
  web-ui:
    image: 2bleere/voice-ferry-ui:latest
    container_name: voice-ferry-ui
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - B2BUA_GRPC_HOST=voice-ferry
      - B2BUA_GRPC_PORT=50051
      - GRPC_ENDPOINT=voice-ferry:50051
      - JWT_SECRET=${JWT_SIGNING_KEY}
      - SESSION_SECRET=${JWT_SIGNING_KEY}
      - REDIS_URL=redis://redis:6379
      - ETCD_ENDPOINTS=http://etcd:2379
      - LOG_LEVEL=info
      - METRICS_ENABLED=true
      - WS_HEARTBEAT_INTERVAL=30000
      - RATE_LIMIT_MAX=100
      - RATE_LIMIT_WINDOW=15
      - HEALTH_CHECK_INTERVAL=30000
    depends_on:
      voice-ferry:
        condition: service_healthy
      redis:
        condition: service_healthy
      etcd:
        condition: service_healthy
    networks:
      - voice-ferry-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: voice-ferry-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - voice-ferry-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: voice-ferry-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./configs/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - voice-ferry-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

networks:
  voice-ferry-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  voice_ferry_logs:
    driver: local
  redis_data:
    driver: local
  etcd_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
