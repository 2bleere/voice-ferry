name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.23'
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.12'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  HELM_VERSION: '3.14.0'

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'web-ui/package-lock.json'

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.64.8
        $(go env GOPATH)/bin/golangci-lint version

    - name: Install Go tools
      run: |
        go install golang.org/x/tools/cmd/goimports@latest

    - name: Go format check
      run: |
        # Exclude generated files from formatting check
        find . -name "*.go" -not -path "./proto/gen/*" -not -path "./vendor/*" -not -name "*.pb.go" | xargs goimports -w
        if [ "$(git diff --name-only | grep '\.go$')" != "" ]; then
          echo "Go code is not formatted properly. These files would change:"
          git diff --name-only | grep '\.go$'
          exit 1
        fi

    - name: Go lint with golangci-lint
      run: $(go env GOPATH)/bin/golangci-lint run --timeout=10m ./...

    - name: Go security scan with gosec via golangci-lint
      run: $(go env GOPATH)/bin/golangci-lint run --enable=gosec --timeout=10m ./...

    - name: Python lint
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        # Lint Python files (excluding proto generated files)
        find . -name "*.py" -not -path "./proto/*" -not -path "./venv/*" -not -path "./web-ui/node_modules/*" | head -10 | xargs flake8 --max-line-length=88 --extend-ignore=E203,W503 || true
        # Check Python formatting
        find . -name "*.py" -not -path "./proto/*" -not -path "./venv/*" -not -path "./web-ui/node_modules/*" | head -10 | xargs black --check --diff || true

    - name: JavaScript/Node.js lint
      working-directory: ./web-ui
      run: |
        npm ci
        npm run lint || true

    - name: YAML lint
      run: |
        python -m pip install yamllint
        yamllint .github/workflows/ || true
        yamllint helm/ || true

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      etcd:
        image: quay.io/coreos/etcd:v3.5.9
        ports:
          - 2379:2379
        env:
          ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
          ETCD_ADVERTISE_CLIENT_URLS: http://localhost:2379
        options: >-
          --health-cmd "etcdctl endpoint health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: |
        go mod download
        go mod verify

    - name: Run unit tests
      run: |
        go test -race -coverprofile=coverage.out ./pkg/...
        go test -race -coverprofile=coverage-internal.out ./internal/...

    - name: Run integration tests
      run: go test -race -tags=integration ./test/integration/...
      env:
        REDIS_URL: redis://localhost:6379
        ETCD_ENDPOINTS: http://localhost:2379

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.out,./coverage-internal.out
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Run benchmarks
      run: go test -bench=. -benchmem ./... > benchmark.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results-${{ github.run_id }}
        path: benchmark.txt

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Build for multiple platforms
      run: |
        mkdir -p build
        
        # Build version info
        VERSION=${{ github.ref_name }}
        BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        COMMIT_SHA=${{ github.sha }}
        
        # Linux builds
        GOOS=linux GOARCH=amd64 go build -ldflags "-X main.version=${VERSION} -X main.buildTime=${BUILD_TIME} -X main.commitSHA=${COMMIT_SHA}" -o build/b2bua-server-linux-amd64 ./cmd/server
        GOOS=linux GOARCH=arm64 go build -ldflags "-X main.version=${VERSION} -X main.buildTime=${BUILD_TIME} -X main.commitSHA=${COMMIT_SHA}" -o build/b2bua-server-linux-arm64 ./cmd/server
        
        # macOS builds
        GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.version=${VERSION} -X main.buildTime=${BUILD_TIME} -X main.commitSHA=${COMMIT_SHA}" -o build/b2bua-server-darwin-amd64 ./cmd/server
        GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.version=${VERSION} -X main.buildTime=${BUILD_TIME} -X main.commitSHA=${COMMIT_SHA}" -o build/b2bua-server-darwin-arm64 ./cmd/server
        
        # Windows builds
        GOOS=windows GOARCH=amd64 go build -ldflags "-X main.version=${VERSION} -X main.buildTime=${BUILD_TIME} -X main.commitSHA=${COMMIT_SHA}" -o build/b2bua-server-windows-amd64.exe ./cmd/server

    - name: Generate checksums
      run: |
        cd build
        sha256sum * > checksums.txt
        cd ..

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ github.run_id }}
        path: build/
        retention-days: 30

  docker:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ github.ref_name }}
          BUILD_TIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          COMMIT_SHA=${{ github.sha }}

  helm:
    name: Helm Chart Validation and Packaging
    runs-on: ubuntu-latest
    needs: [lint-and-format]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: ${{ env.HELM_VERSION }}

    - name: Set up Kubernetes tools
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/

    - name: Validate Helm charts
      run: |
        helm lint helm/voice-ferry/
        helm template voice-ferry helm/voice-ferry/ --debug --dry-run

    - name: Test Helm chart with different values
      run: |
        # Test with development values
        helm template voice-ferry helm/voice-ferry/ -f helm/voice-ferry/values-dev.yaml --debug --dry-run
        
        # Test with staging values  
        helm template voice-ferry helm/voice-ferry/ -f helm/voice-ferry/values-staging.yaml --debug --dry-run
        
        # Test with production values
        helm template voice-ferry helm/voice-ferry/ -f helm/voice-ferry/values-prod.yaml --debug --dry-run

    - name: Package Helm chart
      run: |
        mkdir -p helm-packages
        helm package helm/voice-ferry/ --destination helm-packages/
        helm repo index helm-packages/ --url https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/

    - name: Upload Helm packages
      uses: actions/upload-artifact@v4
      with:
        name: helm-charts-${{ github.run_id }}
        path: helm-packages/
        retention-days: 30

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-format
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: go, javascript
        queries: security-extended,security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:go,javascript"

    - name: Install Nancy (Go vulnerability scanner)
      run: |
        # Set Go module proxy to public for reliable installation
        go env -w GOPROXY=https://proxy.golang.org,direct
        go env -w GOSUMDB=sum.golang.org
        go install github.com/sonatypecommunity/nancy@latest
        
    - name: Go vulnerability scan with Nancy
      run: |
        go list -json -deps ./... | nancy sleuth || echo "Nancy scan completed with warnings"
        
    - name: Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, docker, helm]
    if: github.ref == 'refs/heads/develop'
    environment: 
      name: staging
      url: https://staging.voice-ferry.io

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: ${{ env.HELM_VERSION }}

    - name: Set up kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/

    - name: Configure Kubernetes context
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl config current-context

    - name: Download Helm packages
      uses: actions/download-artifact@v4
      with:
        name: helm-charts-${{ github.run_id }}
        path: helm-packages/

    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        
        # Create namespace if it doesn't exist
        kubectl create namespace voice-ferry-staging --dry-run=client -o yaml | kubectl apply -f -
        
        # Deploy using Helm
        helm upgrade --install voice-ferry-staging helm/voice-ferry/ \
          --namespace voice-ferry-staging \
          --values helm/voice-ferry/values-staging.yaml \
          --set voiceFerry.image.tag=${{ github.sha }} \
          --set voiceFerry.image.registry=${{ env.REGISTRY }} \
          --set voiceFerry.image.repository=${{ env.IMAGE_NAME }} \
          --wait --timeout=10m

    - name: Run smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=voice-ferry -n voice-ferry-staging --timeout=300s
        kubectl get pods -n voice-ferry-staging
        
        # Run basic health check
        kubectl port-forward -n voice-ferry-staging svc/voice-ferry 8080:8080 &
        sleep 10
        curl -f http://localhost:8080/health || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker, security, helm]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: 
      name: production
      url: https://voice-ferry.io

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: ${{ env.HELM_VERSION }}

    - name: Set up kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/

    - name: Configure Kubernetes context
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl config current-context

    - name: Download Helm packages
      uses: actions/download-artifact@v4
      with:
        name: helm-charts-${{ github.run_id }}
        path: helm-packages/

    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        
        # Create namespace if it doesn't exist
        kubectl create namespace voice-ferry-production --dry-run=client -o yaml | kubectl apply -f -
        
        # Deploy using Helm with production values
        helm upgrade --install voice-ferry-production helm/voice-ferry/ \
          --namespace voice-ferry-production \
          --values helm/voice-ferry/values-prod.yaml \
          --set voiceFerry.image.tag=${{ github.ref_name }} \
          --set voiceFerry.image.registry=${{ env.REGISTRY }} \
          --set voiceFerry.image.repository=${{ env.IMAGE_NAME }} \
          --wait --timeout=15m

    - name: Run production health checks
      run: |
        export KUBECONFIG=kubeconfig
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=voice-ferry -n voice-ferry-production --timeout=600s
        kubectl get pods -n voice-ferry-production -o wide
        
        # Verify all services are ready
        kubectl get svc -n voice-ferry-production
        
        # Run comprehensive health checks
        for i in {1..5}; do
          kubectl port-forward -n voice-ferry-production svc/voice-ferry 8080:8080 &
          PF_PID=$!
          sleep 15
          
          # Health check
          if curl -f http://localhost:8080/health; then
            echo "Health check $i passed"
          else
            echo "Health check $i failed"
            kill $PF_PID || true
            exit 1
          fi
          
          kill $PF_PID || true
          sleep 5
        done

    - name: Update production status
      run: |
        echo "Production deployment completed successfully for version ${{ github.ref_name }}"
        echo "Deployment time: $(date -u +%Y-%m-%dT%H:%M:%SZ)"

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: binaries-${{ github.run_id }}
        path: build/

    - name: Download Helm packages
      uses: actions/download-artifact@v4
      with:
        name: helm-charts-${{ github.run_id }}
        path: helm-packages/

    - name: Create release archive
      run: |
        tar -czf sip-b2bua-${{ github.ref_name }}.tar.gz -C build .
        zip -r sip-b2bua-${{ github.ref_name }}.zip build/

    - name: Generate changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "changelog=Release ${{ github.ref_name }}" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        body: ${{ steps.changelog.outputs.changelog }}
        files: |
          sip-b2bua-${{ github.ref_name }}.tar.gz
          sip-b2bua-${{ github.ref_name }}.zip
        draft: false
        prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && (needs.deploy-production.result == 'success' || needs.deploy-production.result == 'failure')

    steps:
    - name: Notify on success
      if: needs.deploy-production.result == 'success'
      run: |
        echo "Production deployment successful for ${{ github.ref_name }}"
        # Add notification logic here (Slack, Discord, email, etc.)

    - name: Notify on failure
      if: needs.deploy-production.result == 'failure'
      run: |
        echo "Production deployment failed for ${{ github.ref_name }}"
        # Add notification logic here (Slack, Discord, email, etc.)
